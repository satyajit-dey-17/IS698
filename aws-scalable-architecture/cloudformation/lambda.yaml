AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda that logs S3 uploads

Parameters:
  CodeS3Bucket:
    Type: String
    Description: S3 bucket where the zipped code is uploaded
  CodeS3Key:
    Type: String
    Description: Key (path) to the zip file, e.g. lambda/log_s3_uploads.zip
  BucketName:
    Type: String
    Description: Name for the S3 bucket to create and monitor

Resources:
  # 1) The Lambda execution role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: [ lambda.amazonaws.com ] }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # 2) The Lambda function
  LogLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-LogUploads'
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key:    !Ref CodeS3Key

  # 3) Allow ANY S3 bucket with this name to invoke (no SourceArn on the resource):
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LogLambdaFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      # Reference only the parameter, not the resource
      SourceArn: !Sub arn:aws:s3:::${BucketName}

  # 4) Create the bucket & wire in the notification
  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt LogLambdaFunction.Arn

Outputs:
  LambdaARN:
    Value: !GetAtt LogLambdaFunction.Arn
  MonitoredBucket:
    Value: !Ref LoggingBucket

